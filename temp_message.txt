I need help with this project chat app to redirect to my /register page as it should be excatly like the login page but saying register instead of login and logical updating the rest.

~/workspace/skuggsnack main* ❯ tree -I node_modules/                                              
.
├── auth-service
│   ├── auth.py
│   ├── Dockerfile
│   └── requirements.txt
├── chat-service
│   ├── Dockerfile
│   ├── requirements.txt
│   └── skuggsnack.py
├── database
│   ├── auth-deployment.yaml
│   ├── auth-secrets.yaml
│   ├── auth-service.yaml
│   ├── chat-deployment.yaml
│   ├── chat-service.yaml
│   ├── frontend-deployment.yaml
│   ├── frontend-service.yaml
│   ├── ingress.yaml
│   ├── mongodb-deployment.yaml
│   ├── mongodb-pvc.yaml
│   ├── mongodb-service.yaml
│   └── namespace.yaml
├── docker-compose.yml
├── frontend
│   ├── Dockerfile
│   ├── nginx.conf
│   ├── package.json
│   ├── package-lock.json
│   ├── postcss.config.js
│   ├── public
│   │   └── index.html
│   ├── src
│   │   ├── api
│   │   │   ├── authApi.js
│   │   │   └── chatApi.js
│   │   ├── App.js
│   │   ├── assets
│   │   │   ├── favicon.ico
│   │   │   ├── logo.png
│   │   │   ├── logo_tran.png
│   │   │   └── logo_tran.svg
│   │   ├── components
│   │   │   ├── AddFriend.js
│   │   │   ├── AddFriendModal.js
│   │   │   ├── Button.js
│   │   │   ├── Chat.js
│   │   │   ├── ChatWindow.js
│   │   │   ├── FriendRequests.js
│   │   │   ├── Header.js
│   │   │   ├── Login.js
│   │   │   ├── MessageInput.js
│   │   │   └── SideBar.js
│   │   ├── context
│   │   │   └── AuthContext.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── reportWebVitals.js
│   │   └── styles.css
│   ├── styles.css
│   └── tailwind.config.js
├── package.json
├── package-lock.json
└── README.md

11 directories, 52 files
~/workspace/skuggsnack main* ❯ cat frontend/src/* frontend/src/components/* frontend/src/context/*
cat: frontend/src/api: Is a directory
// frontend/src/App.js
import React, { useContext } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import AuthContext, { AuthProvider } from './context/AuthContext';
import Header from './components/Header';
import Login from './components/Login';
import Chat from './components/Chat';
import AddFriend from './components/AddFriend';

function App() {
    const { token, handleLogout, handleLogin } = useContext(AuthContext);

    return (
        <Router>
            <Header onLogout={handleLogout} />
            <Routes>
                {token ? (
                    <>
                        <Route path="/chat" element={<Chat />} />
                        <Route path="/add-friend" element={<AddFriend />} />
                        <Route path="*" element={<Navigate to="/chat" />} />
                    </>
                ) : (
                    <>
                        <Route path="/" element={<Login onLogin={handleLogin} />} />
                        <Route path="*" element={<Navigate to="/" />} />
                    </>
                )}
            </Routes>
        </Router>
    );
}

export default App;
cat: frontend/src/assets: Is a directory
cat: frontend/src/components: Is a directory
cat: frontend/src/context: Is a directory
/* frontend/src/index.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Ensure full height for proper Flexbox layouts */
html,
body,
#root {
    height: 100%;
    margin: 0;
    padding: 0;
}

/* Custom styles (if any) can be added below */// frontend/src/index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { AuthProvider } from './context/AuthContext';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <AuthProvider>
        <App />
    </AuthProvider>
);

reportWebVitals();
// frontend/src/reportWebVitals.js

const reportWebVitals = onPerfEntry => {
    if (onPerfEntry && onPerfEntry instanceof Function) {
        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
            getCLS(onPerfEntry);
            getFID(onPerfEntry);
            getFCP(onPerfEntry);
            getLCP(onPerfEntry);
            getTTFB(onPerfEntry);
        });
    }
};

export default reportWebVitals;
body {
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.app {
    display: flex;
    width: 90%;
    max-width: 1200px;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    overflow: hidden;
}

.sidebar {
    width: 25%;
    background-color: #fff;
    border-right: 1px solid #ddd;
    padding: 20px;
    overflow-y: auto;
}

.chat-window {
    width: 75%;
    padding: 20px;
    background-color: #e6ebf1;
    display: flex;
    flex-direction: column;
}

.message {
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
    background-color: #ffffff;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
}

.message strong {
    display: block;
}

.message-input {
    display: flex;
    margin-top: auto;
    gap: 10px;
}

.message-input input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.message-input button {
    padding: 10px 15px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.message-input button:hover {
    background-color: #0056b3;
}// frontend/src/components/AddFriend.js
import React, { useState, useEffect } from 'react';
import authApi from '../api/authApi';

function AddFriend() {
    const [username, setUsername] = useState('');
    const [friendRequests, setFriendRequests] = useState([]);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        fetchFriendRequests();
    }, []);

    const fetchFriendRequests = async () => {
        try {
            const response = await authApi.get('/friend_requests');
            setFriendRequests(response.data);
        } catch (err) {
            console.error('Failed to fetch friend requests:', err);
        }
    };

    const handleSendFriendRequest = async (e) => {
        e.preventDefault();
        setError('');
        setSuccessMessage('');
        try {
            const payload = { friend_username: username };
            const response = await authApi.post('/send_friend_request', payload);
            setSuccessMessage(response.data.message);
            setUsername('');
        } catch (err) {
            console.log('Error response:', err.response?.data);
            const detail = err.response?.data?.detail;
            if (Array.isArray(detail)) {
                setError(detail.map((item) => item.msg).join(', '));
            } else if (typeof detail === 'string') {
                setError(detail);
            } else {
                setError('An error occurred');
            }
        }
    };

    const handleAcceptFriendRequest = async (requestingUsername) => {
        try {
            const response = await authApi.post('/accept_friend_request', { requesting_username: requestingUsername });
            setSuccessMessage(response.data.message);
            // Remove the accepted request from the list
            setFriendRequests(friendRequests.filter((u) => u !== requestingUsername));
            // Optionally, refresh the friends list in AuthContext
        } catch (err) {
            setError(err.response?.data?.detail || 'Failed to accept friend request');
        }
    };

    return (
        <div className="p-4 bg-gray-800 min-h-screen text-white">
            <h2 className="text-2xl font-bold mb-4">Add Friend</h2>
            {successMessage && <div className="text-green-500 mb-2">{successMessage}</div>}
            {error && <div className="text-red-500 mb-2">{error}</div>}
            <form onSubmit={handleSendFriendRequest} className="mb-4">
                <input
                    type="text"
                    placeholder="Enter username"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    className="w-full px-3 py-2 mb-2 border rounded bg-gray-700 text-white"
                />
                <button
                    type="submit"
                    className="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                    Send Friend Request
                </button>
            </form>
            <h3 className="text-xl font-semibold mb-2">Pending Friend Requests</h3>
            {friendRequests.length === 0 ? (
                <p>No pending friend requests.</p>
            ) : (
                <ul>
                    {friendRequests.map((username) => (
                        <li key={username} className="flex justify-between items-center mb-2">
                            <span>{username}</span>
                            <button
                                onClick={() => handleAcceptFriendRequest(username)}
                                className="px-2 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                            >
                                Accept
                            </button>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}

export default AddFriend;
// frontend/src/components/AddFriendModal.js
import React, { useState } from 'react';
import authApi from '../api/authApi';

function AddFriendModal({ isOpen, onClose }) {
    const [username, setUsername] = useState('');
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    const handleSendFriendRequest = async (e) => {
        e.preventDefault();
        setError('');
        setSuccessMessage('');
        try {
            const payload = { friend_username: username };
            const response = await authApi.post('/send_friend_request', payload);
            setSuccessMessage(response.data.message);
            setUsername('');
        } catch (err) {
            console.error('Error sending friend request:', err);
            const detail = err.response?.data?.detail;
            if (typeof detail === 'string') {
                setError(detail);
            } else {
                setError('An error occurred');
            }
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white p-4 rounded shadow-lg w-1/3">
                <h2 className="text-xl font-bold mb-4">Add Friend</h2>
                {successMessage && <div className="text-green-500 mb-2">{successMessage}</div>}
                {error && <div className="text-red-500 mb-2">{error}</div>}
                <form onSubmit={handleSendFriendRequest}>
                    <input
                        type="text"
                        placeholder="Enter username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="w-full px-3 py-2 mb-2 border rounded"
                    />
                    <div className="flex justify-end">
                        <button
                            type="button"
                            onClick={onClose}
                            className="px-4 py-2 mr-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                        >
                            Send Request
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}

export default AddFriendModal;
// frontend/src/components/Button.js

import React from 'react';

function Button({ type = 'primary', children, className = '', ...props }) {
    let bgColor, hoverColor, focusRing, hoverBorderColor;

    switch (type) {
        case 'secondary':
            bgColor = 'bg-gray-700';
            hoverColor = 'hover:bg-gray-800';
            focusRing = 'focus:ring-gray-800';
            hoverBorderColor = 'hover:border-gray-800';
            break;
        case 'accent':
            bgColor = 'bg-accent';
            hoverColor = 'hover:bg-accent-dark';
            focusRing = 'focus:ring-accent-dark';
            hoverBorderColor = 'hover:border-accent-dark';
            break;
        case 'primary':
        default:
            bgColor = 'bg-blue-500';
            hoverColor = 'hover:bg-blue-600';
            focusRing = 'focus:ring-blue-600';
            hoverBorderColor = 'hover:border-[#3BBA9C]';
            break;
    }

    return (
        <button
            className={`${bgColor} ${hoverColor} ${focusRing} ${hoverBorderColor} ${className} border-2 rounded-lg focus:outline-none`}
            {...props}
        >
            {children}
        </button>
    );
}

export default Button;// frontend/src/components/Chat.js
import React, { useState } from 'react';
import SideBar from './SideBar';
import ChatWindow from './ChatWindow';

function Chat() {
    const [recipient, setRecipient] = useState(null);

    const handleSelectFriend = (friendUsername) => {
        setRecipient(friendUsername);
    };

    return (
        <div className="flex flex-1 h-full">
            <SideBar onSelectFriend={handleSelectFriend} />
            <div className="flex flex-1">
                {recipient ? (
                    <ChatWindow recipient={recipient} />
                ) : (
                    <div className="flex flex-1 items-center justify-center bg-gray-100">
                        <p className="text-gray-500">Select a friend to start chatting.</p>
                    </div>
                )}
            </div>
        </div>
    );
}

export default Chat;
// frontend/src/components/ChatWindow.js
import React, { useState, useEffect, useContext, useRef } from 'react';
import chatApi from '../api/chatApi';
import AuthContext from '../context/AuthContext';

function ChatWindow({ recipient }) {
    const { user } = useContext(AuthContext);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [error, setError] = useState('');
    const messagesEndRef = useRef(null);

    useEffect(() => {
        fetchMessages();
    }, [recipient]);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const fetchMessages = async () => {
        if (!recipient) return;
        try {
            const response = await chatApi.get(`/get_messages/${recipient}`);
            const data = response.data;
            if (Array.isArray(data)) {
                setMessages(data);
            } else {
                console.error('Expected an array but got:', data);
                setMessages([]);
            }
        } catch (err) {
            console.error('Failed to fetch messages:', err);
            setError('Failed to fetch messages');
        }
    };

    const handleSendMessage = async (e) => {
        e.preventDefault();
        if (!newMessage.trim()) return;
        setError('');
        try {
            const payload = {
                recipient,
                content: newMessage,
                recipient_type: 'user', // Ensure recipient_type is correctly set
            };
            const response = await chatApi.post('/send_message', payload);
            setMessages([...messages, response.data]);
            setNewMessage('');
        } catch (err) {
            console.error('Failed to send message:', err);
            setError('Failed to send message');
        }
    };

    const scrollToBottom = () => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    };

    return (
        <div className="flex flex-col flex-1 bg-gray-100">
            <div className="flex-1 overflow-y-auto p-4">
                {messages.length > 0 ? (
                    messages.map((msg, index) => (
                        <div
                            key={index}
                            className={`mb-4 p-3 rounded-lg max-w-xs ${msg.sender === user.username
                                ? 'bg-blue-500 text-white self-end'
                                : 'bg-gray-300 text-gray-900'
                                }`}
                        >
                            <p>{msg.content}</p>
                            <span className="block text-xs text-right">
                                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </span>
                        </div>
                    ))
                ) : (
                    <p className="text-center text-gray-500">No messages yet. Start the conversation!</p>
                )}
                <div ref={messagesEndRef} />
            </div>
            <form onSubmit={handleSendMessage} className="flex p-4 bg-white border-t border-gray-200">
                <input
                    type="text"
                    placeholder="Type your message..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    className="flex-1 px-4 py-2 mr-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button
                    type="submit"
                    className="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                    Send
                </button>
            </form>
            {error && <div className="text-red-500 text-center mt-2">{error}</div>}
        </div>
    );
}

export default ChatWindow;
// frontend/src/components/FriendRequests.js
import React, { useState, useEffect } from 'react';
import authApi from '../api/authApi';

function FriendRequests() {
    const [friendRequests, setFriendRequests] = useState([]);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        fetchFriendRequests();
    }, []);

    const fetchFriendRequests = async () => {
        try {
            const response = await authApi.get('/friend_requests');
            setFriendRequests(response.data);
        } catch (err) {
            console.error('Failed to fetch friend requests:', err);
            setError('Failed to fetch friend requests');
        }
    };

    const handleAcceptFriendRequest = async (username) => {
        try {
            const response = await authApi.post('/accept_friend_request', { requesting_username: username });
            setSuccessMessage(response.data.message);
            setFriendRequests(friendRequests.filter((u) => u !== username));
        } catch (err) {
            console.error('Failed to accept friend request:', err);
            setError('Failed to accept friend request');
        }
    };

    return (
        <div className="p-4 bg-gray-800 text-white min-h-screen">
            <h2 className="text-2xl font-bold mb-4">Friend Requests</h2>
            {successMessage && <div className="text-green-500 mb-2">{successMessage}</div>}
            {error && <div className="text-red-500 mb-2">{error}</div>}
            {friendRequests.length === 0 ? (
                <p>No pending friend requests.</p>
            ) : (
                <ul>
                    {friendRequests.map((username) => (
                        <li key={username} className="flex justify-between items-center mb-2">
                            <span>{username}</span>
                            <button
                                onClick={() => handleAcceptFriendRequest(username)}
                                className="px-2 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                            >
                                Accept
                            </button>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}

export default FriendRequests;
// frontend/src/components/Header.js

import React, { useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import AuthContext from '../context/AuthContext';
import Button from './Button';

function Header({ onLogout }) {
    const { token } = useContext(AuthContext);
    const navigate = useNavigate();

    const handleLogoClick = () => {
        if (token) {
            navigate('/chat');
        } else {
            navigate('/');
        }
    };

    return (
        <header className="flex items-center justify-between p-4 bg-primary">
            <div
                className="flex items-center cursor-pointer"
                onClick={handleLogoClick}
            >
                <h1 className="text-accent text-3xl font-bold ">Skuggsnack</h1>
            </div>
            {token && (
                <div className="flex items-center">
                    <Link to="/add-friend">
                        <Button type="secondary">Add Friend</Button>
                    </Link>
                    <Button type="accent" onClick={onLogout} className="ml-2">
                        Logout
                    </Button>
                </div>
            )}
        </header>
    );
}

export default Header;
import React, { useState, useContext } from 'react';
import { Link } from 'react-router-dom';
import AuthContext from '../context/AuthContext';
import Button from './Button';

function Login({ onLogin }) {
    const { handleLogin } = useContext(AuthContext);
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password }),
            });
            const data = await response.json();
            if (response.ok) {
                handleLogin(data.token);
            } else {
                setError(data.message || 'Login failed');
            }
        } catch (err) {
            console.error('Login error:', err);
            setError('An error occurred. Please try again.');
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-[#2E3047]">
            <div className="w-full max-w-md p-8 bg-[#2E3047] border border-[#3BBA9C] rounded-lg shadow-lg">
                <h2 className="mb-6 text-3xl font-bold text-center text-[#3BBA9C]">Login</h2>
                {error && <div className="mb-4 text-red-500 text-center">{error}</div>}
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label htmlFor="username" className="block mb-2 text-md font-medium text-[#3BBA9C]">Username</label>
                        <input
                            type="text"
                            id="username"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            className="w-full px-4 py-2 bg-[#2E3047] border border-[#3BBA9C] rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#3BBA9C]"
                            required
                        />
                    </div>
                    <div className="mb-6">
                        <label htmlFor="password" className="block mb-2 text-md font-medium text-[#3BBA9C]">Password</label>
                        <input
                            type="password"
                            id="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="w-full px-4 py-2 bg-[#2E3047] border border-[#3BBA9C] rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#3BBA9C]"
                            required
                        />
                    </div>
                    <Button type="primary" className="w-full py-2 border-[#3BBA9C] text-lg">Login</Button>
                </form>
                <div className="mt-6 text-center">
                    <p className="text-sm text-gray-300">Don't have an account? <Link to="/register" className="text-[#3BBA9C] hover:underline">Register here</Link>.</p>
                </div>
            </div>
        </div>
    );
}

export default Login;// frontend/src/components/MessageInput.js
import React, { useState } from 'react';
import { FiSend } from 'react-icons/fi'; // Optional: Add icons

function MessageInput({ onSend }) {
    const [message, setMessage] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (message.trim() === '') return;
        onSend(message);
        setMessage('');
    };

    return (
        <form onSubmit={handleSubmit} className="flex items-center">
            <input
                type="text"
                placeholder="Type your message..."
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                className="flex-1 px-4 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button type="submit" className="px-4 py-2 text-white bg-blue-600 rounded-r-md hover:bg-blue-700">
                <FiSend size={20} />
            </button>
        </form>
    );
}

export default MessageInput;
// frontend/src/components/SideBar.js
import React, { useContext } from 'react';
import AuthContext from '../context/AuthContext';

function SideBar({ onSelectFriend }) {
    const { friends } = useContext(AuthContext);

    return (
        <aside className="w-64 bg-gray-800 text-white p-4 overflow-y-auto">
            <h2 className="text-xl font-bold mb-4">Friends</h2>
            {friends && friends.length > 0 ? (
                <ul>
                    {friends.map((friend) => (
                        <li
                            key={friend}
                            className="mb-2 cursor-pointer hover:text-blue-400"
                            onClick={() => onSelectFriend(friend)}
                        >
                            {friend}
                        </li>
                    ))}
                </ul>
            ) : (
                <p className="text-gray-400">No friends yet.</p>
            )}
        </aside>
    );
}

export default SideBar;
// frontend/src/context/AuthContext.js
import React, { createContext, useState, useEffect } from 'react';
import authApi from '../api/authApi';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [token, setToken] = useState(localStorage.getItem('token') || '');
    const [user, setUser] = useState(null);
    const [friends, setFriends] = useState([]);

    const handleLogin = (newToken) => {
        setToken(newToken);
        localStorage.setItem('token', newToken);
    };

    const handleLogout = () => {
        setToken('');
        setUser(null);
        setFriends([]);
        localStorage.removeItem('token');
    };

    const fetchUserData = async () => {
        if (token) {
            try {
                authApi.defaults.headers.common['Authorization'] = `Bearer ${token}`;
                const userResponse = await authApi.get('/me');
                const friendsResponse = await authApi.get('/friends');
                setUser(userResponse.data);
                setFriends(friendsResponse.data);
            } catch (err) {
                console.error('Failed to fetch user data:', err);
                handleLogout();
            }
        }
    };

    useEffect(() => {
        fetchUserData();
    }, [token]);

    return (
        <AuthContext.Provider value={{ token, user, friends, handleLogin, handleLogout, fetchUserData }}>
            {children}
        </AuthContext.Provider>
    );
};

export default AuthContext;
~/workspace/skuggsnack main* ❯ 

Layout was forced before the page was fully loaded. If stylesheets are not yet loaded this may cause a flash of unstyled content. markup.js:250:53
The script from “http://localhost:8081/js/app.js” was loaded even though its MIME type (“text/html”) is not a valid JavaScript MIME type.
register
The stylesheet http://localhost:8081/css/style.css was not loaded because its MIME type, “text/html”, is not “text/css”. register
Uncaught SyntaxError: expected expression, got '<'
app.js:1:1
TypeError: a.default.detectStore(...) is undefined
h1-check.js:1:1301
    u moz-extension://3489d02c-9d57-4981-8044-e1c5d2dc9a45/h1-check.js:1
    1337 moz-extension://3489d02c-9d57-4981-8044-e1c5d2dc9a45/h1-check.js:1
    n moz-extension://3489d02c-9d57-4981-8044-e1c5d2dc9a45/h1-check.js:1
    <anonymous> moz-extension://3489d02c-9d57-4981-8044-e1c5d2dc9a45/h1-check.js:1
    <anonymous> moz-extension://3489d02c-9d57-4981-8044-e1c5d2dc9a45/h1-check.js:1
    #injectIntoIsolatedWorld resource://gre/modules/ExtensionContent.sys.mjs:678
    inject resource://gre/modules/ExtensionContent.sys.mjs:663
    injectInto resource://gre/modules/ExtensionContent.sys.mjs:534
    AsyncFunctionNext self-hosted:800
⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. deprecations.ts:9:12
⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. deprecations.ts:9:12

​
